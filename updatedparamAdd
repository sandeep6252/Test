import jenkins.model.Jenkins
import hudson.model.Job
import hudson.model.ParametersDefinitionProperty
import org.biouno.unochoice.ChoiceParameter
import org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript
import org.biouno.unochoice.GroovyScript

// Retrieve JOB_NAMES from environment
def jobNamesParam = "JOB_NAMES"
def jobNamesString = env[jobNamesParam]
if (!jobNamesString) {
    println "ERROR: JOB_NAMES parameter is empty or not set!"
    return
}

def jobNames = jobNamesString.split(',').collect { it.trim() }

// Define the Groovy script for Active Choice
def scriptContent = """
return ["1.0", "2.0", "3.0"] // Replace this with actual logic
"""

def addParameterToJob(job, parameter) {
    def paramsProperty = job.getProperty(ParametersDefinitionProperty)
    if (!paramsProperty) {
        paramsProperty = new ParametersDefinitionProperty([parameter])
    } else {
        def parameters = new ArrayList<>(paramsProperty.getParameterDefinitions())
        parameters.add(parameter)
        paramsProperty = new ParametersDefinitionProperty(parameters)
    }
    job.removeProperty(ParametersDefinitionProperty) // Remove old property
    job.addProperty(paramsProperty) // Apply updated parameters
    job.save()
    println("âœ… Parameter '${parameter.name}' added to the job '${job.name}'")
}

def addActiveChoiceParameter(job, name, description, script) {
    def activeChoiceParam = new ChoiceParameter(
        name,
        description,
        "randomName",  // Random internal name (Jenkins doesn't expose it)
        new GroovyScript(
            new SecureGroovyScript(script, false, []), // Main script
            new SecureGroovyScript("return['Error']", false, []) // Fallback script
        ),
        "PT_SINGLE_SELECT",  // Choice Type (Dropdown)
        false, // Not filterable
        1 // Filter length (irrelevant for dropdown)
    )

    addParameterToJob(job, activeChoiceParam)
}

def processJobs(jobNames) {
    jobNames.each { jobName ->
        def job = Jenkins.instance.getItemByFullName(jobName)
        if (job) {
            addActiveChoiceParameter(job, "FORTIFY_VERSION", "Select Fortify Version", scriptContent)
        } else {
            println("Job '${jobName}' not found in Jenkins.")
        }
    }
}

// Execute the function
processJobs(jobNames)
